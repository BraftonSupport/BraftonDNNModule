<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="API.Text" xml:space="preserve">
    <value>Your API Key</value>
  </data>
  <data name="Author.Text" xml:space="preserve">
    <value>Author of Blog Posts</value>
  </data>
  <data name="BlogName.Text" xml:space="preserve">
    <value>Select your Blog.</value>
  </data>
  <data name="Brand.Text" xml:space="preserve">
    <value>API Domain</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Brafton Content Importer</value>
  </data>
  <data name="FeedID.Help" xml:space="preserve">
    <value>This will usually be 0</value>
  </data>
  <data name="FeedID.Text" xml:space="preserve">
    <value>Your Feed ID.</value>
  </data>
  <data name="ImportType.Help" xml:space="preserve">
    <value>What type of content will you be importing.</value>
  </data>
  <data name="ImportType.Text" xml:space="preserve">
    <value>Import My: </value>
  </data>
  <data name="lblSetting1.Help" xml:space="preserve">
    <value>Put your value for Setting 1 here.</value>
  </data>
  <data name="lblSetting1.Text" xml:space="preserve">
    <value>Setting One</value>
  </data>
  <data name="lblSetting2.Help" xml:space="preserve">
    <value>Put your value for Setting 2 here.</value>
  </data>
  <data name="lblSetting2.Text" xml:space="preserve">
    <value>Setting Two</value>
  </data>
  <data name="PrivateKey.Text" xml:space="preserve">
    <value>Your Private Key</value>
  </data>
  <data name="PublicKey.Text" xml:space="preserve">
    <value>Your Public Key</value>
  </data>
  <data name="Update.Help" xml:space="preserve">
    <value>Should only be on when updating existing articles.</value>
  </data>
  <data name="Update.Text" xml:space="preserve">
    <value>Update Existing Content</value>
  </data>
  <data name="EndButtonAssetID.Help" xml:space="preserve">
    <value>Entering an Arch Id for use with the Arch Product will result in the Pause Link Url to be disabled.</value>
  </data>
  <data name="EndButtonAssetID.Text" xml:space="preserve">
    <value>Ending Arch ID</value>
  </data>
  <data name="EndButtonLink.Text" xml:space="preserve">
    <value>End of Video CTA URL</value>
  </data>
  <data name="EndButtonText.Help" xml:space="preserve">
    <value>This field is intended for a clickable button and should be kept to as few words as possible. I.E. Click Here, Subscribe ect.</value>
  </data>
  <data name="EndButtonText.Text" xml:space="preserve">
    <value>End of Video Button Text</value>
  </data>
  <data name="EndSubtitle.Text" xml:space="preserve">
    <value>End of Video Subtitle</value>
  </data>
  <data name="EndTitle.Text" xml:space="preserve">
    <value>End of Video Title</value>
  </data>
  <data name="PauseAssetID.Help" xml:space="preserve">
    <value>Entering an Arch Id for use with the Arch Product will result in the Pause Link Url to be disabled.</value>
  </data>
  <data name="PauseAssetID.Text" xml:space="preserve">
    <value>Pause Arch ID</value>
  </data>
  <data name="PauseLink.Text" xml:space="preserve">
    <value>Video Pause CTA URL</value>
  </data>
  <data name="PauseText.Text" xml:space="preserve">
    <value>Video Pause Message</value>
  </data>
  <data name="Debug.Help" xml:space="preserve">
    <value>Turns On Debug Mode to help determine the cause of the importer not operating properly</value>
  </data>
  <data name="Debug.Text" xml:space="preserve">
    <value>Importer Debug Mode</value>
  </data>
  <data name="AddImages.Help" xml:space="preserve">
    <value>If using a template that displays the featured image it is recommended to allow the Blog Module to handle the images.  You may however insert the images into the content and the summary of the article if you need to based on your chosen template.</value>
  </data>
  <data name="AddImages.Text" xml:space="preserve">
    <value>Featured Image</value>
  </data>
  <data name="atlantis.Help" xml:space="preserve">
    <value>Custom CTA's require the use of the AtlantisJS Video player.  You may turn this option OFF if you are not receiving videos or wish to use a different video player on your site.  NOTE: Not all browsers have default video players.</value>
  </data>
  <data name="atlantis.Text" xml:space="preserve">
    <value>Include AtlantisJS Player</value>
  </data>
  <data name="jQuery.Help" xml:space="preserve">
    <value>AtlantisJS requires jQuery.  If you already use jQuery on this page you may turn this option OFF</value>
  </data>
  <data name="jQuery.Text" xml:space="preserve">
    <value>Include jQuery</value>
  </data>
</root>